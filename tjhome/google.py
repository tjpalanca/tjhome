# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/google.ipynb.

# %% auto 0
__all__ = ['app', 'GoogleDevice', 'Intent', 'SyncIntent', 'QueryIntent', 'ExecuteIntent', 'DisconnectIntent',
           'google_fulfillment', 'run']

# %% ../notebooks/google.ipynb 1
import uvicorn

from typing import List, Optional
from fastapi import FastAPI
from fastcore.script import call_parse
from pydantic import BaseModel, Field, conlist
from uuid import UUID, uuid4

# %% ../notebooks/google.ipynb 6
class GoogleDevice(BaseModel):
    id: str
    custom_data: Optional[dict]

# %% ../notebooks/google.ipynb 8
class Intent(BaseModel):
    """
    Smart home intents are simple messaging objects that describe what smart home Action
    to perform such as turn on a light or cast audio to a speaker.

    [Reference](https://developers.google.com/assistant/smarthome/concepts/intents)
    """

    class Input(BaseModel):
        intent: str

        class Payload(BaseModel):
            devices: Optional[List[GoogleDevice]]

    request_id: UUID = Field(default_factory=uuid4)
    inputs: List[Input] = Field(min_items=1, max_items=1)


class SyncIntent(Intent):
    """
    This intent requests the list of devices associated with the given user and their
    capabilities. It is triggered during account linking or when a user manually resyncs
    their devices.

    [Reference](https://developers.google.com/assistant/smarthome/reference/intent/sync)
    """

    class SyncInput(Intent.Input):
        """Input for a sync intent"""

        intent: str = "action.devices.SYNC"

    inputs: List[SyncInput] = Field(min_items=1, max_items=1)


class QueryIntent(Intent):
    """
    This intent queries your fulfillment for the current states of devices, including
    whether the device is online and reachable. Should only retrun state information

    [Reference](https://developers.google.com/assistant/smarthome/reference/intent/query)
    """

    class QueryInput(Intent.Input):
        """Input for a query intent"""

        class QueryPayload(Intent.Input.Payload):
            devices: List[GoogleDevice]
            pass

        intent: str = "action.devices.QUERY"
        payload: QueryPayload

    inputs: List[QueryInput] = Field(min_items=1, max_items=1)


class ExecuteIntent(Intent):
    """
    This intent requests that your fulfillment execute a command for a device. This
    intent is triggered when a user says a phrase that matches a command defined in the
    manifest.

    [Reference](https://developers.google.com/assistant/smarthome/reference/intent/execute)
    """

    class ExecuteInput(Intent.Input):
        """Input for an execute intent"""

        class ExecutePayload(Intent.Input.Payload):
            class Command(BaseModel):
                class Execution(BaseModel):
                    command: str
                    params: Optional[dict]

                devices: List[GoogleDevice]
                execution: List[Execution]

            commands: List[Command]

        intent: str = "action.devices.EXECUTE"
        payload: ExecutePayload

    inputs: List[ExecuteInput] = Field(min_items=1, max_items=1)


class DisconnectIntent(Intent):
    """
    This intent requests that your fulfillment disconnect a user from your service. This
    intent indicates that Google Assistant will not send additional intents for this
    user.

    [Reference](https://developers.google.com/assistant/smarthome/reference/intent/disconnect)
    """

    class DisconnectInput(Intent.Input):
        """Input for a disconnect intent"""

        intent: str = "action.devices.DISCONNECT"

    inputs: List[DisconnectInput] = Field(min_items=1, max_items=1)

# %% ../notebooks/google.ipynb 9
app = FastAPI()

# %% ../notebooks/google.ipynb 10
@app.post("/google/fulfillment")
def google_fulfillment():
    pass

# %% ../notebooks/google.ipynb 11
@call_parse
def run(reload=True):
    uvicorn.run(f"{__name__}:app", host="0.0.0.0", port=3838, reload=reload)
